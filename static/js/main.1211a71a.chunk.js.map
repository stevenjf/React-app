{"version":3,"sources":["App.js","index.js"],"names":["App","useState","buttons","output","setOutput","sum","setSum","squareHandler","length","joinedOutput","join","splitans","square","toString","split","sqrtHandler","sqrt","screenClear","equalsHandler","evaluate","storedSum","push","unshift","className","map","button","index","onClick","e","target","innerHTML","storedOutput","pop","clickHandler","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAwGiBA,EAjGL,WACV,MAAkBC,mBAAS,CAAC,QAAS,OAAQ,SAAU,OAAQ,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAE,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,MAA9GC,EAAP,oBACA,EAA4BD,mBAAS,CAAC,IAAtC,mBAAOE,EAAP,KAAeC,EAAf,KACA,EAAsBH,mBAAS,IAA/B,mBAAOI,EAAP,KAAYC,EAAZ,KAmCMC,EAAgB,WACpB,GAAIJ,EAAOK,OAAQ,EAAG,CACpB,IACMC,EADY,YAAON,GACSO,KAAK,IAGjCC,EAFSC,aAAOH,GACAI,WACEC,MAAM,IAE9BV,EAAUO,KAIRI,EAAc,WAClB,GAAIZ,EAAOK,OAAQ,EAAG,CACpB,IACMC,EADY,YAAON,GACSO,KAAK,IAGjCC,EAFSK,aAAKP,GACEI,WACEC,MAAM,IAC9BV,EAAUO,KAGRM,EAAc,WAClBb,EAAU,IACVE,EAAO,KAGHY,EAAgB,WACpB,GAAIf,EAAOK,OAAS,EAAG,CACrB,IACMC,EADY,YAAON,GACSO,KAAK,IAGjCC,EAFSQ,YAASV,GACFI,WACEC,MAAM,IAC9BV,EAAUO,GAEV,IAAMS,EAAS,YAAOf,GACtBe,EAAUC,KAAK,KACfD,EAAUE,QAAQ,KAClBhB,EAAOc,KAIX,OACE,sBAAKG,UAAU,aAAf,UACE,sBAAKA,UAAU,SAAf,cAA0BpB,EAA1B,IAAkC,sBAAKoB,UAAU,MAAf,cAAuBlB,KAAzD,OAEA,qBAAKkB,UAAU,YAAf,SAEGrB,EAAQsB,KAAI,SAACC,EAAQC,GACpB,OAAO,wBAAQH,UAAU,MAAkBI,QAAS,SAACC,GAAD,OAjFvC,SAACF,EAAOE,GAE3B,GAA2B,MAAvBA,EAAEC,OAAOC,WAAqB3B,EAChCe,SACG,GAA4B,WAAvBU,EAAEC,OAAOC,UACjBvB,SACK,GAA2B,SAAvBqB,EAAEC,OAAOC,UAClBf,SACK,GAA4B,UAAvBa,EAAEC,OAAOC,UACnBb,SACK,GAA2B,SAAvBW,EAAEC,OAAOC,UAAqB,CACvC,IAAMC,EAAY,YAAO5B,GACzB4B,EAAaC,MACb5B,EAAU2B,GACV,IAAMX,EAAS,YAAOf,GACtBe,EAAUY,MACV1B,EAAOc,QACF,GAAe,UAAXjB,EACTC,EAAU,aAEP,CAEH,IAAM2B,EAAY,YAAO5B,GACzB4B,EAAaV,KAAKnB,EAAQwB,IAC1BtB,EAAU2B,GAEV,IAAMX,EAAS,YAAOf,GACtBe,EAAUC,KAAKnB,EAAQwB,IACvBpB,EAAOc,IAqDwDa,CAAaP,EAAOE,IAAxE,SAA6EH,GAAhDC,Y,MCxF9CQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1211a71a.chunk.js","sourcesContent":["\nimport React from \"react\"\nimport { useState } from \"react\"\nimport { evaluate, sqrt, square  } from \"mathjs\"\nimport \"./App.css\"\n// const math = create(all, {})\n\nconst App = () => {\n  const [buttons] = useState([\"clear\", \"back\", \"square\", \"sqrt\", 9, 8, 7, 6, 5, 4, 3, 2, 1,0, \"-\", \"*\", \"+\", \".\", \"/\", \"=\"])\n  const [output, setOutput] = useState([0])\n  const [sum, setSum] = useState([])\n\n  \n\n  const clickHandler = (index, e) => {\n    \n    if (e.target.innerHTML === \"=\" && output) {\n      equalsHandler() }\n    else if ( e.target.innerHTML === \"square\" ){\n      squareHandler()\n    } else if (e.target.innerHTML === \"sqrt\"){\n      sqrtHandler()\n    } else if ( e.target.innerHTML === \"clear\"){\n      screenClear()\n    } else if (e.target.innerHTML === \"back\"){\n      const storedOutput = [...output]\n      storedOutput.pop()\n      setOutput(storedOutput)\n      const storedSum = [...sum]\n      storedSum.pop()\n      setSum(storedSum)\n    } else if (output === \"error\") {\n      setOutput(\"error\")\n    }\n    else {\n      \n      const storedOutput = [...output]\n      storedOutput.push(buttons[index])\n      setOutput(storedOutput)\n\n      const storedSum = [...sum]\n      storedSum.push(buttons[index])\n      setSum(storedSum)\n    }\n  }\n  const squareHandler = () => {\n    if (output.length >0) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = square(joinedOutput)\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      \n      setOutput(splitans)\n    }\n    \n  }\n  const sqrtHandler = () => {\n    if (output.length >0) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = sqrt(joinedOutput)\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      setOutput(splitans)\n    }\n  }\n  const screenClear = () => {\n    setOutput(\"\")\n    setSum(\"\")\n  }\n  \n  const equalsHandler = () => {\n    if (output.length > 1) {\n      const storedOutput = [...output]\n      const joinedOutput = storedOutput.join(\"\")\n      const answer = evaluate(joinedOutput)\n      const strans = answer.toString()\n      const splitans = strans.split(\"\")\n      setOutput(splitans)\n\n      const storedSum = [...sum]\n      storedSum.push(\")\")\n      storedSum.unshift(\"(\")\n      setSum(storedSum)\n    }\n  }\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"screen\"> {output} <div className=\"sum\"> {sum}</div> </div>\n      \n      <div className=\"container\">\n\n        {buttons.map((button, index) => {\n          return <button className=\"btn\" key={index} onClick={(e) => clickHandler(index, e)}>{button}</button>\n\n        })}\n        \n      </div>\n      </div>\n   \n  )}\n\n  export default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}